// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Devices.Registration.Clients.Devices.V20190115
{
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for RuntimeRegistration.
    /// </summary>
    public static partial class RuntimeRegistrationExtensions
    {
            /// <summary>
            /// Gets the registration operation status.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='registrationId'>
            /// Registration ID.
            /// </param>
            /// <param name='operationId'>
            /// Operation ID.
            /// </param>
            /// <param name='idScope'>
            /// </param>
            public static RegistrationOperationStatus OperationStatusLookup(this IRuntimeRegistration operations, string registrationId, string operationId, string idScope)
            {
                return operations.OperationStatusLookupAsync(registrationId, operationId, idScope).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the registration operation status.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='registrationId'>
            /// Registration ID.
            /// </param>
            /// <param name='operationId'>
            /// Operation ID.
            /// </param>
            /// <param name='idScope'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<RegistrationOperationStatus> OperationStatusLookupAsync(this IRuntimeRegistration operations, string registrationId, string operationId, string idScope, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.OperationStatusLookupWithHttpMessagesAsync(registrationId, operationId, idScope, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the device registration status.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='registrationId'>
            /// Registration ID.
            /// </param>
            /// <param name='deviceRegistration'>
            /// Device registration
            /// </param>
            /// <param name='idScope'>
            /// </param>
            public static DeviceRegistrationResult DeviceRegistrationStatusLookup(this IRuntimeRegistration operations, string registrationId, DeviceRegistration deviceRegistration, string idScope)
            {
                return operations.DeviceRegistrationStatusLookupAsync(registrationId, deviceRegistration, idScope).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the device registration status.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='registrationId'>
            /// Registration ID.
            /// </param>
            /// <param name='deviceRegistration'>
            /// Device registration
            /// </param>
            /// <param name='idScope'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<DeviceRegistrationResult> DeviceRegistrationStatusLookupAsync(this IRuntimeRegistration operations, string registrationId, DeviceRegistration deviceRegistration, string idScope, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeviceRegistrationStatusLookupWithHttpMessagesAsync(registrationId, deviceRegistration, idScope, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Registers the devices.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='registrationId'>
            /// The registration ID is alphanumeric, lowercase, and may contain hyphens.
            /// </param>
            /// <param name='deviceRegistration'>
            /// Device registration request.
            /// </param>
            /// <param name='idScope'>
            /// </param>
            public static RegistrationOperationStatus RegisterDevice(this IRuntimeRegistration operations, string registrationId, DeviceRegistration deviceRegistration, string idScope)
            {
                return operations.RegisterDeviceAsync(registrationId, deviceRegistration, idScope).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Registers the devices.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='registrationId'>
            /// The registration ID is alphanumeric, lowercase, and may contain hyphens.
            /// </param>
            /// <param name='deviceRegistration'>
            /// Device registration request.
            /// </param>
            /// <param name='idScope'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<RegistrationOperationStatus> RegisterDeviceAsync(this IRuntimeRegistration operations, string registrationId, DeviceRegistration deviceRegistration, string idScope, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.RegisterDeviceWithHttpMessagesAsync(registrationId, deviceRegistration, idScope, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
